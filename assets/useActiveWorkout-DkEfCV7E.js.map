{"version":3,"file":"useActiveWorkout-DkEfCV7E.js","sources":["../../src/features/workouttracker/hooks/useActiveWorkout.ts"],"sourcesContent":["// Src/features/workouttracker/hooks/useActiveWorkout.ts\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '@/features/auth/hooks/useAuth';\r\nimport { IActiveWorkout, ISet, WorkoutStatus, IWorkoutStats } from '../types';\r\nimport {\r\n  getActiveWorkoutById,\r\n  updateActiveWorkout,\r\n  completeWorkout,\r\n} from '../firebase';\r\nimport { toast } from 'sonner';\r\nimport { Timestamp } from 'firebase/firestore';\r\n\r\n/**\r\n * Custom hook for managing an active workout session.\r\n * @param workoutId - The ID of the workout to track\r\n * @returns Methods and state for the active workout\r\n */\r\nexport const useActiveWorkout = (workoutId?: string) => {\r\n  const [workout, setWorkout] = useState<IActiveWorkout | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  // Load workout data\r\n  useEffect(() => {\r\n    const fetchWorkout = async () => {\r\n      if (!workoutId || !user) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        const result = await getActiveWorkoutById(workoutId);\r\n\r\n        if (!result) {\r\n          setError('Workout not found');\r\n          return;\r\n        }\r\n\r\n        if (result.userId !== user.uid) {\r\n          setError('You do not have permission to view this workout');\r\n          return;\r\n        }\r\n\r\n        setWorkout(result);\r\n      } catch (err) {\r\n        setError('Failed to load workout data');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWorkout();\r\n  }, [workoutId, user]);\r\n\r\n  /**\r\n   * Updates a set's completion status and data.\r\n   * @param exerciseIndex - The index of the exercise\r\n   * @param setIndex - The index of the set within the exercise\r\n   * @param data - The updated set data\r\n   */\r\n  const updateSet = useCallback(\r\n    async (exerciseIndex: number, setIndex: number, data: Partial<ISet>) => {\r\n      if (!workout?.id || !user) return;\r\n\r\n      try {\r\n        const updatedExercises = [...workout.exercises];\r\n        const currentSets = [...updatedExercises[exerciseIndex].sets];\r\n\r\n        currentSets[setIndex] = {\r\n          ...currentSets[setIndex],\r\n          ...data,\r\n        };\r\n\r\n        updatedExercises[exerciseIndex] = {\r\n          ...updatedExercises[exerciseIndex],\r\n          sets: currentSets,\r\n        };\r\n\r\n        // Update local state immediately for responsive UI\r\n        setWorkout((prev) =>\r\n          prev\r\n            ? {\r\n                ...prev,\r\n                exercises: updatedExercises,\r\n              }\r\n            : null,\r\n        );\r\n\r\n        // Persist to database\r\n        await updateActiveWorkout(workout.id, {\r\n          exercises: updatedExercises,\r\n        });\r\n\r\n        toast.success('Set updated');\r\n      } catch (err) {\r\n        toast.error('Failed to update set');\r\n        console.error(err);\r\n      }\r\n    },\r\n    [workout, user],\r\n  );\r\n\r\n  /**\r\n   * Adds a new set to an exercise.\r\n   * @param exerciseIndex - The index of the exercise\r\n   */\r\n  const addSet = useCallback(\r\n    async (exerciseIndex: number) => {\r\n      if (!workout?.id || !user) return;\r\n\r\n      try {\r\n        const updatedExercises = [...workout.exercises];\r\n        const currentExercise = updatedExercises[exerciseIndex];\r\n\r\n        // Create a new set based on the last set if available\r\n        const lastSet =\r\n          currentExercise.sets.length > 0\r\n            ? currentExercise.sets[currentExercise.sets.length - 1]\r\n            : { weight: 0, reps: 0, isCompleted: false };\r\n\r\n        const newSet: ISet = {\r\n          weight: lastSet.weight,\r\n          reps: lastSet.reps,\r\n          isCompleted: false,\r\n        };\r\n\r\n        updatedExercises[exerciseIndex] = {\r\n          ...currentExercise,\r\n          sets: [...currentExercise.sets, newSet],\r\n        };\r\n\r\n        // Update local state\r\n        setWorkout((prev) =>\r\n          prev\r\n            ? {\r\n                ...prev,\r\n                exercises: updatedExercises,\r\n              }\r\n            : null,\r\n        );\r\n\r\n        // Persist to database\r\n        await updateActiveWorkout(workout.id, {\r\n          exercises: updatedExercises,\r\n        });\r\n\r\n        toast.success('Set added');\r\n      } catch (err) {\r\n        toast.error('Failed to add set');\r\n        console.error(err);\r\n      }\r\n    },\r\n    [workout, user],\r\n  );\r\n\r\n  /**\r\n   * Marks the workout as complete.\r\n   */\r\n  const finishWorkout = useCallback(async () => {\r\n    if (!workout?.id || !user) return;\r\n\r\n    try {\r\n      // First check if we have permission by validating user ownership\r\n      if (workout.userId !== user.uid) {\r\n        toast.error('You do not have permission to complete this workout');\r\n        return;\r\n      }\r\n      await completeWorkout(workout.id);\r\n      toast.success('Workout completed!');\r\n\r\n      setWorkout((prev) =>\r\n        prev\r\n          ? {\r\n              ...prev,\r\n              status: WorkoutStatus.COMPLETED,\r\n              endTime: Timestamp.now(),\r\n            }\r\n          : null,\r\n      );\r\n\r\n      navigate(`/workout/summary/${workout.id}`);\r\n    } catch (err) {\r\n      // Improved error handling with more specific messages based on error type\r\n      if (err instanceof Error) {\r\n        const errorMessage = err.message;\r\n        if (errorMessage.includes('permission')) {\r\n          toast.error(\r\n            \"Access denied: You don't have permission to complete this workout\",\r\n          );\r\n          console.error('Permission error:', err);\r\n        } else {\r\n          toast.error(`Failed to complete workout: ${errorMessage}`);\r\n          console.error('Error completing workout:', err);\r\n        }\r\n      } else {\r\n        toast.error('An unknown error occurred');\r\n        console.error('Unknown error:', err);\r\n      }\r\n    }\r\n  }, [workout, user, navigate]);\r\n\r\n  /**\r\n   * Calculates statistics for the current workout.\r\n   * @returns Workout statistics\r\n   */\r\n  const calculateStats = useCallback((): IWorkoutStats => {\r\n    if (!workout)\r\n      return {\r\n        totalSets: 0,\r\n        totalCompletedSets: 0,\r\n        totalReps: 0,\r\n        totalWeight: 0,\r\n        totalExercises: 0,\r\n      };\r\n\r\n    let totalSets = 0;\r\n    let totalCompletedSets = 0;\r\n    let totalReps = 0;\r\n    let totalWeight = 0;\r\n\r\n    workout.exercises.forEach((exercise) => {\r\n      totalSets += exercise.sets.length;\r\n\r\n      exercise.sets.forEach((set) => {\r\n        if (set.isCompleted) {\r\n          totalCompletedSets++;\r\n          totalReps += set.reps;\r\n          totalWeight += set.weight * set.reps;\r\n        }\r\n      });\r\n    });\r\n\r\n    return {\r\n      totalSets,\r\n      totalCompletedSets,\r\n      totalReps,\r\n      totalWeight,\r\n      totalExercises: workout.exercises.length,\r\n    };\r\n  }, [workout]);\r\n\r\n  return {\r\n    workout,\r\n    loading,\r\n    error,\r\n    updateSet,\r\n    addSet,\r\n    finishWorkout,\r\n    calculateStats,\r\n  };\r\n};\r\n"],"names":["useActiveWorkout","workoutId","workout","setWorkout","useState","loading","setLoading","error","setError","user","useAuth","navigate","useNavigate","useEffect","result","getActiveWorkoutById","err","updateSet","useCallback","exerciseIndex","setIndex","data","updatedExercises","currentSets","prev","updateActiveWorkout","toast","addSet","currentExercise","lastSet","newSet","finishWorkout","completeWorkout","WorkoutStatus","Timestamp","errorMessage","calculateStats","totalSets","totalCompletedSets","totalReps","totalWeight","exercise","set"],"mappings":"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"}