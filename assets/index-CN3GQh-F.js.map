{"version":3,"file":"index-CN3GQh-F.js","sources":["../../node_modules/lucide-react/dist/esm/icons/info.js","../../src/components/ui/editable-text.tsx","../../src/features/workoutplanner/components/exercise/SearchResults.tsx","../../src/features/workoutplanner/components/exercise/SearchPanel.tsx","../../src/features/workoutplanner/components/exercise/SelectionDialog.tsx","../../src/components/ui/table.tsx","../../src/features/workoutplanner/components/exercise/ExerciseItem.tsx","../../src/features/workoutplanner/components/exercise/DetailsDialogs.tsx","../../src/features/workoutplanner/components/workoutview/WorkoutColumn.tsx","../../src/features/workoutplanner/hooks/useExerciseData.ts","../../src/features/workoutplanner/hooks/useWorkoutPlanner.ts","../../src/features/workoutplanner/pages/WorkoutPlanner.tsx","../../src/lib/exerciseDBApi.ts"],"sourcesContent":["/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M12 16v-4\", key: \"1dtifu\" }],\n  [\"path\", { d: \"M12 8h.01\", key: \"e9boi3\" }]\n];\nconst Info = createLucideIcon(\"info\", __iconNode);\n\nexport { __iconNode, Info as default };\n//# sourceMappingURL=info.js.map\n","import * as React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { cn } from '@/shared/utils/classMerger'; // Assuming this path is correct for your project's cn utility\r\n\r\nexport interface IEditableTextProps {\r\n  initialValue: string | number;\r\n  onSave: (newValue: string) => void;\r\n  as?: 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\r\n  className?: string;\r\n  inputClassName?: string;\r\n  displayTextPlaceholder?: string;\r\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\r\n  inputProps?: Omit<\r\n    React.InputHTMLAttributes<HTMLInputElement>,\r\n    'value' | 'onChange' | 'onBlur' | 'onKeyDown' | 'className' | 'ref'\r\n  >;\r\n}\r\n\r\n/**\r\n * A component that displays text that can be edited in place.\r\n * It appears as normal text until clicked (or focused and Enter/Space is pressed),\r\n * then transforms into an input field.\r\n */\r\nexport const EditableText: React.FC<IEditableTextProps> = ({\r\n  initialValue,\r\n  onSave,\r\n  as = 'span',\r\n  className,\r\n  inputClassName,\r\n  type = 'text',\r\n  displayTextPlaceholder = 'Click to edit',\r\n  inputProps,\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const [currentValue, setCurrentValue] = useState<string | number>(\r\n    initialValue,\r\n  );\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const TextWrapper = as;\r\n\r\n  useEffect(() => {\r\n    if (!isEditing) {\r\n      setCurrentValue(initialValue);\r\n    }\r\n  }, [initialValue, isEditing]);\r\n\r\n  useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const handleSave = () => {\r\n    setIsEditing(false);\r\n    onSave(currentValue.toString());\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setCurrentValue(initialValue); // Revert to the last known good state (initialValue prop)\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCurrentValue(event.target.value);\r\n  };\r\n\r\n  const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); // Prevent form submission if inside a form\r\n      handleSave();\r\n    } else if (event.key === 'Escape') {\r\n      handleCancel();\r\n    }\r\n  };\r\n\r\n  const handleTextClick = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleTextKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\r\n    if (event.key === 'Enter' || event.key === ' ') {\r\n      event.preventDefault();\r\n      setIsEditing(true);\r\n    }\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <input\r\n        ref={inputRef}\r\n        type={type}\r\n        value={currentValue}\r\n        onChange={handleInputChange}\r\n        onBlur={handleSave}\r\n        onKeyDown={handleInputKeyDown}\r\n        spellCheck=\"false\"\r\n        className={cn(\r\n          className,\r\n          'bg-transparent border-input focus:border-primary outline-none',\r\n          'text-inherit font-inherit m-0',\r\n          'min-w-[50px]',\r\n          'underline underline-offset-2 decoration-dashed decoration-muted-foreground',\r\n          type === 'number' &&\r\n            'appearance-none [-moz-appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-inner-spin-button]:m-0',\r\n          inputClassName,\r\n        )}\r\n        {...inputProps}\r\n      />\r\n    );\r\n  }\r\n\r\n  const displayValue =\r\n    String(currentValue).trim() === '' ? displayTextPlaceholder : currentValue;\r\n\r\n  return (\r\n    <TextWrapper\r\n      onClick={handleTextClick}\r\n      onKeyDown={handleTextKeyDown}\r\n      className={cn(\r\n        'cursor-text hover:bg-muted/30 dark:hover:bg-muted/20 transition-colors underline underline-offset-2  decoration-muted-foreground',\r\n        {\r\n          // eslint-disable-next-line @typescript-eslint/naming-convention\r\n          'text-muted-foreground italic':\r\n            String(currentValue).trim() === '' &&\r\n            displayValue === displayTextPlaceholder,\r\n        },\r\n        className,\r\n      )}\r\n      tabIndex={0}\r\n      role=\"button\"\r\n      aria-label={`Edit text. Current value: ${String(currentValue).trim() === '' ? 'empty, placeholder is ' + displayTextPlaceholder : currentValue}`}\r\n    >\r\n      {displayValue}\r\n    </TextWrapper>\r\n  );\r\n};\r\n","import { Button } from '@/components/ui/button';\r\nimport { IExerciseSearchResultItem } from '../../types';\r\nimport { Info } from 'lucide-react';\r\n\r\ninterface ISearchResultsProps {\r\n  searchResults: IExerciseSearchResultItem[];\r\n  onSelectExercise: (exerciseId: string) => void;\r\n  onViewExercise?: (exerciseId: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport const SearchResults: React.FC<ISearchResultsProps> = ({\r\n  searchResults,\r\n  onViewExercise,\r\n  onSelectExercise,\r\n}) => {\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {searchResults.map((exercise) => (\r\n        <div\r\n          key={exercise.exerciseId}\r\n          className=\"flex justify-between items-center p-4 border rounded-md bg-card text-card-foreground\"\r\n        >\r\n          <p className=\"text-sm text-muted-foreground mb-1\">{exercise.name}</p>\r\n          <div className=\"flex items-center\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={() => onViewExercise?.(exercise.exerciseId)}\r\n            >\r\n              <Info className=\"h-4 w-4 text-muted-foreground\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => onSelectExercise(exercise.exerciseId)}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Search } from 'lucide-react';\r\nimport { IExerciseSearchResultItem } from '../../types';\r\nimport { cn } from '@/shared/utils/classMerger';\r\nimport { SearchResults } from './SearchResults';\r\n\r\n/**\r\n * Props for the ExerciseSearchPanel component\r\n */\r\ninterface IExerciseSearchPanelProps {\r\n  searchTerm: string;\r\n  searchResults: IExerciseSearchResultItem[];\r\n  isSearching: boolean;\r\n  error: string | null;\r\n  onSearchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSelectExercise: (exerciseId: string) => void;\r\n  onViewExercise?: (exerciseId: string) => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Exercise search panel component\r\n */\r\nexport const SearchPanel: React.FC<IExerciseSearchPanelProps> = ({\r\n  searchTerm,\r\n  searchResults,\r\n  isSearching,\r\n  error,\r\n  onSearchChange,\r\n  onSelectExercise,\r\n  onViewExercise,\r\n  className,\r\n}) => {\r\n  return (\r\n    <Card className={cn('h-full flex flex-col', className)}>\r\n      <CardHeader className=\"py-3 px-3\">\r\n        <CardTitle className=\"text-base\">Exercise Library</CardTitle>\r\n      </CardHeader>\r\n      <div className=\"px-3 pb-2\">\r\n        <div className=\"relative\">\r\n          <Input\r\n            placeholder=\"Search exercises...\"\r\n            value={searchTerm}\r\n            onChange={onSearchChange}\r\n            className=\"pr-8\"\r\n          />\r\n          <Search className=\"absolute right-2 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n        </div>\r\n      </div>\r\n\r\n      <CardContent className=\"flex-1 p-2 overflow-y-auto max-h-[calc(100vh-200px)]\">\r\n        {isSearching ? (\r\n          <div className=\"flex items-center justify-center h-24\">\r\n            <p className=\"text-sm text-muted-foreground\">Searching...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"flex items-center justify-center h-24\">\r\n            <p className=\"text-sm text-destructive\">{error}</p>\r\n          </div>\r\n        ) : searchTerm.trim() !== '' && searchResults.length === 0 ? (\r\n          <div className=\"flex items-center justify-center h-24\">\r\n            <p className=\"text-sm text-muted-foreground\">No exercises found</p>\r\n          </div>\r\n        ) : searchTerm.trim() === '' ? (\r\n          <div className=\"flex items-center justify-center h-24\">\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              Enter a keyword to search exercises\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <SearchResults\r\n            searchResults={searchResults}\r\n            onSelectExercise={onSelectExercise}\r\n            onViewExercise={onViewExercise}\r\n          />\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { IExerciseSearchResultItem } from '../../types';\r\n\r\ninterface IExerciseSelectionDialogProps {\r\n  title: string | null;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSelectExercise: (exercise: IExerciseSearchResultItem) => void;\r\n  onViewExercise: (exercise: IExerciseSearchResultItem) => void;\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * Dialog component for selecting exercises to add to a workout day\r\n */\r\nexport const SelectionDialog: React.FC<IExerciseSelectionDialogProps> = ({\r\n  title,\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n}) => {\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Add Exercise to {title}</DialogTitle>\r\n          <DialogDescription>\r\n            Search and select an exercise to add to your workout.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"mt-4 h-96\">{children}</div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n","import * as React from 'react';\n\nimport { cn } from '@/shared/utils/classMerger';\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n","import React from 'react'; // Removed useState as it's not used here\r\nimport { IPlannedExercise } from '../../types';\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n} from '@/components/ui/table';\r\nimport { Button } from '@/components/ui/button';\r\nimport { PlusCircle, Trash2 } from 'lucide-react';\r\nimport { EditableText } from '@/components/ui';\r\n\r\n/**\r\n * Props for the ExerciseItem component\r\n */\r\ninterface IExerciseItemProps {\r\n  exercise: IPlannedExercise;\r\n  onAddSet?: (exerciseId: string) => void;\r\n  onDeleteSet?: (exerciseId: string) => void;\r\n  OnSaveReps?: (reps: number | string) => void;\r\n  OnSaveWeight?: (weight: number | string) => void;\r\n  className?: string;\r\n  id?: string;\r\n}\r\n\r\n/**\r\n * Exercise item component for displaying exercises in workout planner.\r\n * Renders a table of sets with weight and reps, and allows adding new sets.\r\n */\r\nexport const ExerciseItem: React.FC<IExerciseItemProps> = ({\r\n  exercise,\r\n  onAddSet,\r\n  onDeleteSet,\r\n  OnSaveReps,\r\n  OnSaveWeight,\r\n  className,\r\n  id,\r\n}) => {\r\n  const { sets = 0, weight = 0, reps = 0, exerciseId } = exercise;\r\n\r\n  return (\r\n    <div\r\n      className={`rounded border p-4 bg-card text-card-foreground ${className ?? ''}`}\r\n      id={id}\r\n    >\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead className=\"w-1/4\">Set</TableHead>\r\n            <TableHead className=\"w-1/4\">Reps</TableHead>\r\n            <TableHead className=\"w-1/4\">Weight</TableHead>\r\n            <TableHead className=\"w-1/4 text-right\"></TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {Array.from({ length: sets }, (_, index) => (\r\n            <TableRow key={index}>\r\n              <TableCell>{index + 1}</TableCell>\r\n              <TableCell>\r\n                <EditableText\r\n                  className=\"w-16\"\r\n                  initialValue={reps}\r\n                  onSave={(newVale) => OnSaveReps && OnSaveReps(newVale)}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <EditableText\r\n                  className=\"w-16\"\r\n                  initialValue={weight}\r\n                  onSave={(newVale) => OnSaveWeight && OnSaveWeight(newVale)}\r\n                />\r\n              </TableCell>\r\n              <TableCell className=\"text-right\">\r\n                {sets > 1 && (\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"icon\"\r\n                    onClick={\r\n                      onDeleteSet ? () => onDeleteSet(exerciseId) : undefined\r\n                    }\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n          <TableRow>\r\n            <TableCell colSpan={4} className=\"text-center \">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={onAddSet ? () => onAddSet(exerciseId) : undefined}\r\n                className=\"w-full\"\r\n              >\r\n                <PlusCircle className=\"h-full w-3\" />\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { IExerciseSearchResultItem } from '@/features/workoutplanner/types';\r\n\r\ninterface IExerciseDetailDialogProps {\r\n  exercise: IExerciseSearchResultItem | null;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSave?: (exercise: IExerciseSearchResultItem) => void;\r\n  mode?: 'view' | 'edit';\r\n}\r\n\r\n/**\r\n * Dialog component that displays and allows editing exercise details\r\n */\r\nexport const DetailsDialog: React.FC<IExerciseDetailDialogProps> = ({\r\n  exercise,\r\n  isOpen,\r\n  onClose,\r\n}) => {\r\n  if (!exercise) return null;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle>{exercise.name}</DialogTitle>\r\n\r\n          <DialogDescription>\r\n            {exercise.targetMuscles} - {exercise.equipments}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4 mt-4\">\r\n          {exercise.instructions && exercise.instructions.length > 0 && (\r\n            <div>\r\n              <h3 className=\"font-medium mb-2\">Instructions:</h3>\r\n              {exercise.instructions.map((instruction, index) => (\r\n                <p key={index} className=\"text-sm text-muted-foreground mb-1\">\r\n                  {instruction}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <DialogFooter className=\"flex justify-between\">\r\n          <Button onClick={onClose} size=\"sm\">\r\n            Close\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n","import { Info, Loader2, Trash2 } from 'lucide-react';\r\nimport { Button } from '@components/ui/button';\r\nimport { IPlannedExercise, IWorkout } from '../../types';\r\n\r\ninterface IWorkoutColumnProps {\r\n  children: React.ReactNode;\r\n  plannedExercise: IPlannedExercise;\r\n  workout: IWorkout;\r\n  isSearching?: boolean;\r\n  removeExerciseFromWorkout: (workoutId: string, exerciseId: string) => void;\r\n  handleViewExerciseDetails: (exerciseId: string) => void;\r\n}\r\n\r\nexport const WorkoutColumn: React.FC<IWorkoutColumnProps> = ({\r\n  children,\r\n  plannedExercise,\r\n  workout,\r\n  isSearching,\r\n  removeExerciseFromWorkout,\r\n  handleViewExerciseDetails,\r\n}) => {\r\n  return (\r\n    <div key={plannedExercise.exerciseId} className=\"border-t pt-4\">\r\n      <div className=\"flex justify-between items-center mb-2\">\r\n        <h4 className=\"font-medium\">{plannedExercise.name}</h4>\r\n        <div>\r\n          <div className=\"flex flex-row\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={() =>\r\n                handleViewExerciseDetails(plannedExercise.exerciseId)\r\n              }\r\n              aria-label={`View details for ${plannedExercise.name}`}\r\n            >\r\n              {isSearching ? (\r\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n              ) : (\r\n                <Info className=\"h-4 w-4\" />\r\n              )}\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={() =>\r\n                removeExerciseFromWorkout(\r\n                  workout.id,\r\n                  plannedExercise.exerciseId,\r\n                )\r\n              }\r\n              aria-label={`Remove ${plannedExercise.name} from workout`}\r\n            >\r\n              <Trash2 className=\"h-4 w-4 text-red-400\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useCallback, useEffect } from 'react';\r\nimport { exerciseApi } from '@/features/workoutplanner';\r\nimport { IExerciseSearchResultItem } from '../types';\r\nimport { useDebounce } from '@/hooks/useDebounce';\r\n\r\n/**\r\n * Interface for the exercise data hook return values\r\n */\r\nexport interface IUseExerciseData {\r\n  searchTerm: string;\r\n  searchResults: IExerciseSearchResultItem[];\r\n  isSearching: boolean;\r\n  error: string | null;\r\n  setSearchTerm: (term: string) => void;\r\n  selectExercise: (\r\n    exerciseId: string,\r\n  ) => Promise<IExerciseSearchResultItem | null>;\r\n}\r\n\r\n/**\r\n * Custom hook for managing exercise search and selection\r\n * @returns Exercise data management functions and state\r\n */\r\nexport const useExerciseData = (): IUseExerciseData => {\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n  const [isSearching, setIsSearching] = useState<boolean>(false);\r\n  const [searchResults, setSearchResults] = useState<\r\n    IExerciseSearchResultItem[]\r\n  >([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  /**\r\n   * Performs search when debounced search term changes\r\n   */\r\n  useEffect(() => {\r\n    const performSearch = async () => {\r\n      if (!debouncedSearchTerm.trim()) {\r\n        setSearchResults([]);\r\n        return;\r\n      }\r\n\r\n      setIsSearching(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const apiResults =\r\n          await exerciseApi.searchExercises(debouncedSearchTerm);\r\n\r\n        if (apiResults.success && Array.isArray(apiResults.data)) {\r\n          setSearchResults(apiResults.data);\r\n        } else {\r\n          setError(\"Couldn't retrieve exercise data. Format error.\");\r\n          setSearchResults([]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error searching exercises:', error);\r\n        setError(\"Couldn't connect to exercise database.\");\r\n        setSearchResults([]);\r\n      } finally {\r\n        setIsSearching(false);\r\n      }\r\n    };\r\n\r\n    performSearch();\r\n  }, [debouncedSearchTerm]);\r\n\r\n  /**\r\n   * Selects an exercise and fetches its full details\r\n   * @param exerciseId - The ID of the exercise to fetch\r\n   * @returns The complete exercise definition or null if failed\r\n   */\r\n  const selectExercise = useCallback(\r\n    async (exerciseId: string): Promise<IExerciseSearchResultItem | null> => {\r\n      setIsSearching(true);\r\n      try {\r\n        const fullExercise = await exerciseApi.getExerciseById(exerciseId);\r\n        if (fullExercise.success) {\r\n          return fullExercise.data;\r\n        } else {\r\n          setError('Failed to fetch exercise details. Please try again.');\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching exercise details:', error);\r\n        setError('Failed to fetch exercise details. Please try again.');\r\n        return null;\r\n      } finally {\r\n        setIsSearching(false);\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  return {\r\n    searchTerm,\r\n    searchResults,\r\n    isSearching,\r\n    error,\r\n    setSearchTerm,\r\n    selectExercise,\r\n  };\r\n};\r\n","import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useAuth } from '@/features/auth/hooks/useAuth';\r\nimport { useAppState } from '@/hooks/useAppState';\r\nimport {\r\n  addPlannedWorkout,\r\n  IExerciseSearchResultItem,\r\n  IPlannedExercise,\r\n  IPlannedWorkouts,\r\n  IWorkout,\r\n} from '@/features/workoutplanner';\r\nimport { toast } from 'sonner';\r\nimport { Timestamp } from 'firebase/firestore';\r\n\r\n/**\r\n * Creates a new IPlannedWorkouts object with default values.\r\n * @param name - The initial name for the workout plan.\r\n * @param initialWorkouts - An array of IWorkout to include in the plan.\r\n * @param userId - Optional ID of the user creating the plan.\r\n * @returns A new IPlannedWorkouts object.\r\n */\r\nconst createNewPlannedWorkouts = (\r\n  name: string,\r\n  initialWorkouts: IWorkout[],\r\n): IPlannedWorkouts => {\r\n  const now = Timestamp.now();\r\n  return {\r\n    id: `temp-plan-${now.toMillis()}`,\r\n    name,\r\n    workouts: initialWorkouts,\r\n    createdAt: now,\r\n    updatedAt: now,\r\n  };\r\n};\r\n\r\n/**\r\n * Custom hook for managing workout planner state and operations.\r\n * Initializes and manages a single IPlannedWorkouts object.\r\n */\r\nexport const useWorkoutPlanner = () => {\r\n  const { user } = useAuth();\r\n  const { state: appState } = useAppState();\r\n  const numberOfWorkoutsPerWeek = appState.userPreferences.workoutDaysPerWeek;\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [isSaving, setIsSaving] = useState<boolean>(false);\r\n  const [plannedWorkouts, setPlannedWorkouts] = useState<\r\n    IPlannedWorkouts | undefined\r\n  >(undefined);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    if (user) {\r\n      const defaultWorkoutTemplates: IWorkout[] = Array.from(\r\n        { length: numberOfWorkoutsPerWeek },\r\n        (_, i) => ({\r\n          id: `workout-template-${Date.now()}-${i}`,\r\n          name: `Workout ${i + 1}`,\r\n          exercises: [],\r\n          completed: false,\r\n        }),\r\n      );\r\n      setPlannedWorkouts(\r\n        createNewPlannedWorkouts('My Workout Plan', defaultWorkoutTemplates),\r\n      );\r\n    } else {\r\n      setPlannedWorkouts(undefined);\r\n    }\r\n    setIsLoading(false);\r\n  }, [user, numberOfWorkoutsPerWeek]);\r\n\r\n  const addExerciseToWorkout = useCallback(\r\n    (workoutId: string, exercise: IExerciseSearchResultItem) => {\r\n      setPlannedWorkouts((prevPlan) => {\r\n        if (!prevPlan) return prevPlan;\r\n\r\n        const updatedInternalWorkouts = prevPlan.workouts.map((workout) => {\r\n          if (workout.id !== workoutId) return workout;\r\n          if (\r\n            workout.exercises.some(\r\n              (ex) => ex.exerciseId === exercise.exerciseId,\r\n            )\r\n          ) {\r\n            toast.error('Exercise Already Exists', {\r\n              description: `\"${exercise.name}\" is already in \"${workout.name}\".`,\r\n            });\r\n            return workout;\r\n          }\r\n          const plannedExercise: IPlannedExercise = {\r\n            ...exercise,\r\n            sets: 1,\r\n            reps: 10,\r\n            weight: 0,\r\n          };\r\n          toast('Exercise Added', {\r\n            description: `\"${exercise.name}\" added to \"${workout.name}\".`,\r\n          });\r\n          return {\r\n            ...workout,\r\n            exercises: [...workout.exercises, plannedExercise],\r\n          };\r\n        });\r\n\r\n        return {\r\n          ...prevPlan,\r\n          workouts: updatedInternalWorkouts,\r\n          updatedAt: Timestamp.now(),\r\n        };\r\n      });\r\n    },\r\n    [],\r\n  );\r\n\r\n  const removeExerciseFromWorkout = useCallback(\r\n    (workoutId: string, exerciseId: string) => {\r\n      setPlannedWorkouts((prevPlan) => {\r\n        if (!prevPlan) return prevPlan;\r\n        let exerciseRemovedName: string | undefined;\r\n        let workoutName: string | undefined;\r\n\r\n        const updatedInternalWorkouts = prevPlan.workouts.map((workout) => {\r\n          if (workout.id !== workoutId) return workout;\r\n          const originalExercise = workout.exercises.find(\r\n            (ex) => ex.exerciseId === exerciseId,\r\n          );\r\n          if (originalExercise) {\r\n            exerciseRemovedName = originalExercise.name;\r\n            workoutName = workout.name;\r\n          }\r\n          return {\r\n            ...workout,\r\n            exercises: workout.exercises.filter(\r\n              (ex) => ex.exerciseId !== exerciseId,\r\n            ),\r\n          };\r\n        });\r\n        if (exerciseRemovedName && workoutName) {\r\n          toast('Exercise Removed', {\r\n            description: `\"${exerciseRemovedName}\" removed from \"${workoutName}\".`,\r\n          });\r\n        }\r\n        return {\r\n          ...prevPlan,\r\n          workouts: updatedInternalWorkouts,\r\n          updatedAt: Timestamp.now(),\r\n        };\r\n      });\r\n    },\r\n    [],\r\n  );\r\n\r\n  /**\r\n   * Updates specific details of an exercise within a workout.\r\n   * @param workoutId - The ID of the workout containing the exercise.\r\n   * @param exerciseId - The ID of the exercise to update.\r\n   * @param updatedExerciseData - An object containing the exercise properties to update. Can be a partial update.\r\n   */\r\n  const updateExerciseInWorkout = useCallback(\r\n    (\r\n      workoutId: string,\r\n      exerciseId: string,\r\n      updatedExerciseData: Partial<IPlannedExercise>,\r\n    ) => {\r\n      setPlannedWorkouts((prevPlan) => {\r\n        if (!prevPlan) return prevPlan;\r\n\r\n        const updatedInternalWorkouts = prevPlan.workouts.map((workout) => {\r\n          if (workout.id !== workoutId) {\r\n            return workout;\r\n          }\r\n          const updatedExercises = workout.exercises.map((exercise) => {\r\n            if (exercise.exerciseId !== exerciseId) {\r\n              return exercise;\r\n            }\r\n\r\n            const currentExercise = workout.exercises.find(\r\n              (ex) => ex.exerciseId === exerciseId,\r\n            );\r\n            const finalUpdatedData = { ...exercise, ...updatedExerciseData };\r\n            if (updatedExerciseData.sets !== undefined && currentExercise) {\r\n              toast.info(\r\n                `Sets for ${currentExercise.name} updated to ${updatedExerciseData.sets} in ${workout.name}`,\r\n              );\r\n            }\r\n\r\n            return finalUpdatedData;\r\n          });\r\n          return { ...workout, exercises: updatedExercises };\r\n        });\r\n\r\n        return {\r\n          ...prevPlan,\r\n          workouts: updatedInternalWorkouts,\r\n          updatedAt: Timestamp.now(),\r\n        };\r\n      });\r\n    },\r\n    [],\r\n  );\r\n\r\n  const setWorkoutName = useCallback((workoutId: string, newName: string) => {\r\n    setPlannedWorkouts((prevPlan) => {\r\n      if (!prevPlan) return prevPlan;\r\n      const updatedInternalWorkouts = prevPlan.workouts.map((workout) =>\r\n        workout.id === workoutId ? { ...workout, name: newName } : workout,\r\n      );\r\n      return {\r\n        ...prevPlan,\r\n        workouts: updatedInternalWorkouts,\r\n        updatedAt: Timestamp.now(),\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const setWorkoutTitle = useCallback(\r\n    (title: string) => {\r\n      setPlannedWorkouts((prevPlan) => {\r\n        const now = Timestamp.now();\r\n        if (!prevPlan) {\r\n          const defaultTemplates: IWorkout[] = Array.from(\r\n            { length: numberOfWorkoutsPerWeek },\r\n            (_, i) => ({\r\n              id: `workout-template-${Date.now()}-${i}`,\r\n              name: `Workout ${i + 1}`,\r\n              exercises: [],\r\n            }),\r\n          );\r\n          return createNewPlannedWorkouts(title, defaultTemplates);\r\n        }\r\n        return {\r\n          ...prevPlan,\r\n          name: title,\r\n          updatedAt: now,\r\n        };\r\n      });\r\n    },\r\n    [numberOfWorkoutsPerWeek],\r\n  );\r\n\r\n  /**\r\n   * Prepares the current workout plan for saving.\r\n   * Ensures ID is finalized and timestamps are current.\r\n   * @returns The IPlannedWorkouts object ready for saving, or undefined if not ready.\r\n   */\r\n  const preparePlanForSave = useCallback((): IPlannedWorkouts | undefined => {\r\n    if (!user) {\r\n      toast.error('User not authenticated. Cannot save workout plan.');\r\n      return undefined;\r\n    }\r\n    if (!plannedWorkouts) {\r\n      toast.error('Workout plan is not initialized. Cannot save.');\r\n      return undefined;\r\n    }\r\n\r\n    const planName = plannedWorkouts.name || 'My Workout Plan';\r\n    const now = Timestamp.now();\r\n\r\n    const finalId =\r\n      plannedWorkouts.id && !plannedWorkouts.id.startsWith('temp-plan-')\r\n        ? plannedWorkouts.id\r\n        : `${planName.replace(/\\s+/g, '-')}-${now.toMillis()}`;\r\n\r\n    const planToSave: IPlannedWorkouts = {\r\n      ...plannedWorkouts,\r\n      id: finalId,\r\n      name: planName,\r\n      updatedAt: now,\r\n      createdAt: plannedWorkouts.createdAt || now,\r\n    };\r\n\r\n    setPlannedWorkouts(planToSave);\r\n    return planToSave;\r\n  }, [user, plannedWorkouts]);\r\n\r\n  const workouts = useMemo(\r\n    () => plannedWorkouts?.workouts || [],\r\n    [plannedWorkouts],\r\n  );\r\n\r\n  /**\r\n   * Saves the current workout plan to Firestore.\r\n   * Manages isSaving state and provides user feedback.\r\n   * @returns A promise that resolves to true if successful, false otherwise.\r\n   */\r\n  const saveWorkoutPlan = useCallback(async (): Promise<boolean> => {\r\n    const planToSave = preparePlanForSave();\r\n    if (!planToSave) {\r\n      return false;\r\n    }\r\n    setIsSaving(true);\r\n    try {\r\n      await addPlannedWorkout(planToSave);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving workout plan:', error);\r\n      return false;\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  }, [preparePlanForSave]);\r\n\r\n  return {\r\n    isLoading,\r\n    isSaving,\r\n    plannedWorkouts,\r\n    workouts,\r\n    numberOfWorkoutsPerWeek,\r\n    addExerciseToWorkout,\r\n    removeExerciseFromWorkout,\r\n    updateExerciseInWorkout,\r\n    preparePlanForSave,\r\n    setWorkoutName,\r\n    setWorkoutTitle,\r\n    saveWorkoutPlan,\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\r\nimport { Loader2, PlusCircle } from 'lucide-react';\r\nimport {\r\n  DetailsDialog,\r\n  ExerciseItem,\r\n  IWorkout,\r\n  SearchPanel,\r\n  SelectionDialog,\r\n  useExerciseData,\r\n  useWorkoutPlanner,\r\n  WorkoutColumn,\r\n  IExerciseSearchResultItem,\r\n  IPlannedExercise,\r\n} from '@/features/workoutplanner';\r\nimport { EditableText } from '@/components/ui/editable-text';\r\nimport { toast } from 'sonner';\r\nimport { useAppState } from '@/hooks/useAppState';\r\n\r\nexport const WorkoutPlanner: React.FC = () => {\r\n  const {\r\n    workouts,\r\n    plannedWorkouts,\r\n    isLoading,\r\n    isSaving,\r\n    addExerciseToWorkout,\r\n    removeExerciseFromWorkout,\r\n    updateExerciseInWorkout,\r\n    setWorkoutTitle,\r\n    setWorkoutName,\r\n    saveWorkoutPlan,\r\n  } = useWorkoutPlanner();\r\n\r\n  const { state, setWorkoutDaysPerWeek } = useAppState();\r\n\r\n  const {\r\n    searchTerm,\r\n    searchResults,\r\n    isSearching,\r\n    error: searchError,\r\n    setSearchTerm,\r\n    selectExercise: fetchExerciseDetails,\r\n  } = useExerciseData();\r\n\r\n  const [currentWorkoutIdForOps, setCurrentWorkoutIdForOps] = useState<\r\n    string | null\r\n  >(null);\r\n  const [exerciseDetailsToShow, setExerciseDetailsToShow] =\r\n    useState<IExerciseSearchResultItem | null>(null);\r\n\r\n  const handleOpenAddExerciseDialog = (workoutId: string) => {\r\n    setCurrentWorkoutIdForOps(workoutId);\r\n  };\r\n\r\n  const handleViewExerciseDetails = async (exerciseId: string) => {\r\n    const details = await fetchExerciseDetails(exerciseId);\r\n    if (details) {\r\n      setExerciseDetailsToShow(details);\r\n    }\r\n  };\r\n\r\n  const handleSelectExerciseForWorkout = (\r\n    exerciseDefinition: IExerciseSearchResultItem,\r\n  ) => {\r\n    if (currentWorkoutIdForOps) {\r\n      addExerciseToWorkout(currentWorkoutIdForOps, exerciseDefinition);\r\n    }\r\n    handleCloseModals();\r\n  };\r\n\r\n  const handleAddExerciseToWorkout = (exerciseId: string) => {\r\n    if (currentWorkoutIdForOps) {\r\n      const selectedExercise = searchResults.find(\r\n        (exercise) => exercise.exerciseId === exerciseId,\r\n      );\r\n      if (selectedExercise) {\r\n        addExerciseToWorkout(currentWorkoutIdForOps, selectedExercise);\r\n      }\r\n    }\r\n    handleCloseModals();\r\n  };\r\n\r\n  const handleCloseModals = () => {\r\n    setCurrentWorkoutIdForOps(null);\r\n    setExerciseDetailsToShow(null);\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const handleModifySet = (\r\n    workoutId: string,\r\n    exercise: IPlannedExercise,\r\n    increase: boolean,\r\n  ) => {\r\n    const currentSets = exercise.sets || 0;\r\n    const newSets = increase ? currentSets + 1 : Math.max(0, currentSets - 1);\r\n    updateExerciseInWorkout(workoutId, exercise.exerciseId, {\r\n      sets: newSets,\r\n    });\r\n  };\r\n\r\n  const handleValueChange = (\r\n    workoutId: string,\r\n    exercise: IPlannedExercise,\r\n    reps: number | string,\r\n    property: 'reps' | 'weight',\r\n  ) => {\r\n    console.log('reps', reps);\r\n    const parsedReps = typeof reps === 'string' ? parseInt(reps, 10) : reps;\r\n    if (!isNaN(parsedReps)) {\r\n      updateExerciseInWorkout(workoutId, exercise.exerciseId, {\r\n        [property]: parsedReps,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAddPlannedWorkoutsToFirebase = async () => {\r\n    const success = await saveWorkoutPlan();\r\n    if (success) {\r\n      toast.success('Workout plan saved successfully!');\r\n    } else {\r\n      toast.error('Failed to save workout plan.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <EditableText\r\n          as=\"h1\"\r\n          className=\"text-2xl font-bold\"\r\n          initialValue={plannedWorkouts?.name || ''}\r\n          onSave={(newValue) => setWorkoutTitle(newValue)}\r\n        />\r\n        <div className=\"flex justify-end items-center space-x-4\">\r\n          <p className=\"text-sm text-gray-500\">\r\n            You prefer to work out\r\n            <EditableText\r\n              as=\"span\"\r\n              className=\"font-medium mx-1 fit-content w-8\"\r\n              initialValue={state.userPreferences.workoutDaysPerWeek.toString()}\r\n              onSave={(newValue) => setWorkoutDaysPerWeek(parseInt(newValue))}\r\n              type=\"number\"\r\n            />\r\n            times a week.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        {workouts.map((workout: IWorkout) => (\r\n          <Card key={workout.id} id={`workout-${workout.id}`}>\r\n            <CardHeader>\r\n              <div className=\"flex justify-between items-start\">\r\n                <div className=\"flex flex-row justify-between items-center w-full\">\r\n                  <EditableText\r\n                    className=\"text-sm font-semibold\"\r\n                    initialValue={workout.name}\r\n                    onSave={(newValue) => setWorkoutName(workout.id, newValue)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"w-full mb-4\"\r\n                onClick={() => handleOpenAddExerciseDialog(workout.id)}\r\n              >\r\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Exercise\r\n              </Button>\r\n              <div className=\"space-y-4\">\r\n                {workout.exercises.map((plannedExercise: IPlannedExercise) => (\r\n                  <WorkoutColumn\r\n                    key={plannedExercise.exerciseId}\r\n                    plannedExercise={plannedExercise}\r\n                    workout={workout}\r\n                    removeExerciseFromWorkout={removeExerciseFromWorkout}\r\n                    handleViewExerciseDetails={handleViewExerciseDetails}\r\n                  >\r\n                    <ExerciseItem\r\n                      exercise={plannedExercise}\r\n                      onAddSet={() =>\r\n                        handleModifySet(workout.id, plannedExercise, true)\r\n                      }\r\n                      onDeleteSet={() =>\r\n                        handleModifySet(workout.id, plannedExercise, false)\r\n                      }\r\n                      OnSaveReps={(reps) =>\r\n                        handleValueChange(\r\n                          workout.id,\r\n                          plannedExercise,\r\n                          reps,\r\n                          'reps',\r\n                        )\r\n                      }\r\n                      OnSaveWeight={(weight) =>\r\n                        handleValueChange(\r\n                          workout.id,\r\n                          plannedExercise,\r\n                          weight,\r\n                          'weight',\r\n                        )\r\n                      }\r\n                    />\r\n                  </WorkoutColumn>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      <DetailsDialog\r\n        exercise={exerciseDetailsToShow}\r\n        isOpen={!!exerciseDetailsToShow}\r\n        onClose={handleCloseModals}\r\n      />\r\n\r\n      <SelectionDialog\r\n        title={`Add Exercise to ${\r\n          workouts.find((w) => w.id === currentWorkoutIdForOps)?.name ||\r\n          'Workout'\r\n        }`}\r\n        isOpen={!!currentWorkoutIdForOps}\r\n        onClose={handleCloseModals}\r\n        onSelectExercise={handleSelectExerciseForWorkout}\r\n        onViewExercise={() => console.log('')}\r\n      >\r\n        <SearchPanel\r\n          searchTerm={searchTerm}\r\n          searchResults={searchResults}\r\n          isSearching={isSearching}\r\n          error={searchError}\r\n          onSearchChange={(e) => setSearchTerm(e.target.value)}\r\n          onSelectExercise={handleAddExerciseToWorkout}\r\n          onViewExercise={handleViewExerciseDetails}\r\n        />\r\n      </SelectionDialog>\r\n      <div className=\"fixed bottom-4 right-4 z-50\">\r\n        <Button\r\n          variant=\"default\"\r\n          onClick={handleAddPlannedWorkoutsToFirebase}\r\n          disabled={isLoading || !plannedWorkouts}\r\n        >\r\n          {isSaving && <Loader2 className=\"animate-spin mr-2\" />}\r\n          Save Workout Plan\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { IExerciseSearchResultItem } from '../features/workoutplanner/types';\r\nimport { IImportMeta } from '../../vite-env';\r\n\r\nconst EXERCISE_BASE_URL: IImportMeta = import.meta.env.VITE_EXERCISE_BASE_URL;\r\n\r\ninterface IApiResponse<T> {\r\n  data: T;\r\n  status: number;\r\n  success: boolean;\r\n}\r\n\r\nexport const exerciseApi = {\r\n  /**\r\n   * Get exercise data by ID\r\n   */\r\n  getExerciseById: async (\r\n    id: string,\r\n  ): Promise<IApiResponse<IExerciseSearchResultItem>> => {\r\n    try {\r\n      const response = await fetch(`${EXERCISE_BASE_URL}/exercises/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Exercise API error: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error getting exercise data for ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Search for exercises by name\r\n   */\r\n  searchExercises: async (\r\n    query: string,\r\n  ): Promise<IApiResponse<IExerciseSearchResultItem[]>> => {\r\n    try {\r\n      const response = await fetch(\r\n        `${EXERCISE_BASE_URL}/exercises/autocomplete?search=${encodeURIComponent(\r\n          query,\r\n        )}`,\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(`Exercise API error: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error searching exercises:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n"],"names":["__iconNode","Info","createLucideIcon","EditableText","initialValue","onSave","as","className","inputClassName","type","displayTextPlaceholder","inputProps","isEditing","setIsEditing","useState","currentValue","setCurrentValue","inputRef","useRef","TextWrapper","useEffect","handleSave","handleCancel","handleInputChange","event","handleInputKeyDown","handleTextClick","handleTextKeyDown","jsx","cn","displayValue","SearchResults","searchResults","onViewExercise","onSelectExercise","exercise","jsxs","Button","SearchPanel","searchTerm","isSearching","error","onSearchChange","Card","CardHeader","CardTitle","Input","Search","CardContent","SelectionDialog","title","isOpen","onClose","children","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Table","props","TableHeader","TableBody","TableRow","TableHead","TableCell","ExerciseItem","onAddSet","onDeleteSet","OnSaveReps","OnSaveWeight","id","sets","weight","reps","exerciseId","_","index","newVale","Trash2","PlusCircle","DetailsDialog","instruction","DialogFooter","WorkoutColumn","plannedExercise","workout","removeExerciseFromWorkout","handleViewExerciseDetails","Loader2","useExerciseData","setSearchTerm","debouncedSearchTerm","useDebounce","setIsSearching","setSearchResults","setError","apiResults","exerciseApi","selectExercise","useCallback","fullExercise","createNewPlannedWorkouts","name","initialWorkouts","now","Timestamp","useWorkoutPlanner","user","useAuth","appState","useAppState","numberOfWorkoutsPerWeek","isLoading","setIsLoading","isSaving","setIsSaving","plannedWorkouts","setPlannedWorkouts","defaultWorkoutTemplates","addExerciseToWorkout","workoutId","prevPlan","updatedInternalWorkouts","ex","toast","exerciseRemovedName","workoutName","originalExercise","updateExerciseInWorkout","updatedExerciseData","updatedExercises","currentExercise","finalUpdatedData","setWorkoutName","newName","setWorkoutTitle","defaultTemplates","i","preparePlanForSave","planName","finalId","planToSave","workouts","useMemo","saveWorkoutPlan","addPlannedWorkout","WorkoutPlanner","state","setWorkoutDaysPerWeek","searchError","fetchExerciseDetails","currentWorkoutIdForOps","setCurrentWorkoutIdForOps","exerciseDetailsToShow","setExerciseDetailsToShow","handleOpenAddExerciseDialog","details","handleSelectExerciseForWorkout","exerciseDefinition","handleCloseModals","handleAddExerciseToWorkout","selectedExercise","handleModifySet","increase","currentSets","newSets","handleValueChange","property","parsedReps","handleAddPlannedWorkoutsToFirebase","newValue","_a","w","e","EXERCISE_BASE_URL","response","query"],"mappings":"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","x_google_ignoreList":[0]}