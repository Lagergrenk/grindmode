{"version":3,"file":"useNutritionEntry-D0RBBiQl.js","sources":["../../node_modules/date-fns/constructNow.mjs","../../node_modules/date-fns/isSameDay.mjs","../../node_modules/date-fns/isToday.mjs","../../src/shared/utils/format.ts","../../src/features/nutrition/firestore.ts","../../src/features/nutrition/hooks/useNutritionEntry.ts"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","import { Timestamp } from 'firebase/firestore';\r\n\r\nexport const formatTime = (timestamp: Timestamp): string => {\r\n  const date = timestamp.toDate();\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  // Pad minutes with leading zero if needed\r\n  return `${hours}:${minutes.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const formatDate = (date: Date): string => {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n  }).format(date);\r\n};\r\n\r\nexport function formatTimeStringToTimestamp(time: string): Timestamp {\r\n  const [hours, minutes] = time.split(':').map(Number);\r\n  const date = new Date();\r\n  date.setHours(hours, minutes, 0, 0);\r\n  return Timestamp.fromDate(date);\r\n}\r\n\r\nexport function formatTimeStampToTimeString(timestamp: Timestamp): string {\r\n  const date = timestamp.toDate();\r\n  return date.toLocaleTimeString([], {\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  });\r\n}\r\n","import { INutritionEntry } from '@/features/nutrition';\r\nimport { FirestoreService } from '@/shared/services/firestore';\r\n\r\nconst nutritionService = new FirestoreService<INutritionEntry>('nutrition');\r\n\r\n/**\r\n * Add a new nutrition entry to Firestore\r\n * @param entry - Nutrition entry to add\r\n */\r\nexport const addNutritionEntry = async (\r\n  entry: Omit<INutritionEntry, 'date'> | Partial<INutritionEntry>,\r\n): Promise<string> => {\r\n  try {\r\n    return await nutritionService.add(entry);\r\n  } catch (error) {\r\n    console.error('Error adding nutrition entry:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get all nutrition entries from Firestore\r\n * @param max - Maximum number of entries to fetch\r\n * @returns\r\n */\r\nexport const getNutritionEntries = async (\r\n  max?: number,\r\n): Promise<INutritionEntry[]> => {\r\n  try {\r\n    return await nutritionService.getAll(max);\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition entries:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getNutritionEntryById = async (\r\n  entryId: string,\r\n): Promise<INutritionEntry | null> => {\r\n  try {\r\n    return await nutritionService.getById(entryId);\r\n  } catch (error) {\r\n    console.error(`Error fetching nutrition entry ${entryId}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Update a nutrition entry in Firestore\r\n * @param entryId - ID of the nutrition entry to update\r\n * @param entryData - Partial nutrition entry data to update\r\n */\r\nexport const updateNutritionEntry = async (\r\n  entryId: string,\r\n  entryData: Partial<INutritionEntry>,\r\n): Promise<boolean> => {\r\n  try {\r\n    return await nutritionService.update(entryId, entryData);\r\n  } catch (error) {\r\n    console.error(`Error updating nutrition entry ${entryId}:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a nutrition entry from Firestore\r\n * @param entryId - ID of the nutrition entry to delete\r\n */\r\nexport const deleteNutritionEntry = async (\r\n  entryId: string,\r\n): Promise<boolean> => {\r\n  try {\r\n    return await nutritionService.delete(entryId);\r\n  } catch (error) {\r\n    console.error(`Error deleting nutrition entry ${entryId}:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get nutrition entries by date\r\n * @param date - Date to fetch nutrition entries for\r\n */\r\nexport const getNutritionEntriesByDate = async (\r\n  date: Date,\r\n): Promise<INutritionEntry[]> => {\r\n  try {\r\n    return await nutritionService.getByDate(date);\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition entries by date:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get nutrition entries in a date range\r\n * @param startDate - Date to start the range\r\n * @param endDate - Date to end the range\r\n */\r\nexport const getNutritionInDateRange = async (\r\n  startDate: Date,\r\n  endDate: Date,\r\n): Promise<INutritionEntry[]> => {\r\n  try {\r\n    return await nutritionService.getByDateRange(startDate, endDate);\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition entries in date range:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get nutrition summary for the last 7 days\r\n */\r\nexport const getNutritionSummary = async (): Promise<INutritionEntry[]> => {\r\n  try {\r\n    const today = new Date();\r\n    const startDate = new Date(today);\r\n    startDate.setDate(today.getDate() - 7);\r\n\r\n    return await nutritionService.getByDateRange(startDate, today);\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition summary:', error);\r\n    return [];\r\n  }\r\n};\r\n","import {\r\n  getNutritionEntriesByDate,\r\n  addNutritionEntry,\r\n  updateNutritionEntry,\r\n  deleteNutritionEntry,\r\n  getNutritionEntries,\r\n  getNutritionSummary,\r\n} from '@/features/nutrition/firestore';\r\nimport { INutritionEntry } from '@/features/nutrition';\r\nimport { isToday } from 'date-fns';\r\nimport { Timestamp } from 'firebase/firestore';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\n\r\nexport const useNutritionEntry = (selectedDate: Date) => {\r\n  const [allNutritionEntries, setAllNutritionEntries] = useState<\r\n    INutritionEntry[]\r\n  >([]);\r\n  const [selectedDateNutritionEntries, setSelectedDateNutritionEntries] =\r\n    useState<INutritionEntry[]>([]);\r\n  const [weeklyNutritionEntries, setWeeklyNutritionEntries] = useState<\r\n    INutritionEntry[]\r\n  >([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [dataVersion, setDataVersion] = useState<number>(0);\r\n\r\n  const isEntryInCurrentWeek = useCallback(\r\n    (entry: INutritionEntry): boolean => {\r\n      if (!entry.date) return false;\r\n\r\n      const today = new Date();\r\n      const weekAgo = new Date();\r\n      weekAgo.setDate(today.getDate() - 7);\r\n\r\n      const entryDate = entry.date.toDate();\r\n      return entryDate >= weekAgo && entryDate <= today;\r\n    },\r\n    [],\r\n  );\r\n\r\n  const refreshData = useCallback(\r\n    (updatedEntry?: INutritionEntry) => {\r\n      // If we have an updated entry, update the state immediately\r\n      if (updatedEntry) {\r\n        setSelectedDateNutritionEntries((prev) => {\r\n          // If the entry already exists in the array, replace it\r\n          if (prev.some((entry) => entry.id === updatedEntry.id)) {\r\n            return prev.map((entry) =>\r\n              entry.id === updatedEntry.id ? updatedEntry : entry,\r\n            );\r\n          }\r\n          // Otherwise add it to the array\r\n          else {\r\n            return [updatedEntry, ...prev];\r\n          }\r\n        });\r\n\r\n        // Also update the weekly and all entries arrays if needed\r\n        if (isEntryInCurrentWeek(updatedEntry)) {\r\n          setWeeklyNutritionEntries((prev) => {\r\n            if (prev.some((entry) => entry.id === updatedEntry.id)) {\r\n              return prev.map((entry) =>\r\n                entry.id === updatedEntry.id ? updatedEntry : entry,\r\n              );\r\n            } else {\r\n              return [updatedEntry, ...prev];\r\n            }\r\n          });\r\n        }\r\n\r\n        setAllNutritionEntries((prev) => {\r\n          if (prev.some((entry) => entry.id === updatedEntry.id)) {\r\n            return prev.map((entry) =>\r\n              entry.id === updatedEntry.id ? updatedEntry : entry,\r\n            );\r\n          } else {\r\n            return [updatedEntry, ...prev];\r\n          }\r\n        });\r\n      }\r\n\r\n      // Always trigger a refetch to ensure consistency with server\r\n      setDataVersion((prev) => prev + 1);\r\n    },\r\n    [isEntryInCurrentWeek],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchSelectedDateNutritionEntries = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await getNutritionEntriesByDate(selectedDate);\r\n        setSelectedDateNutritionEntries(response);\r\n      } catch (error) {\r\n        console.error('Error fetching nutrition entries by date:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchSelectedDateNutritionEntries();\r\n  }, [selectedDate]);\r\n\r\n  useEffect(() => {\r\n    const fetchWeeklyData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const today = new Date();\r\n        const lastWeek = new Date();\r\n        lastWeek.setDate(today.getDate() - 7);\r\n\r\n        const entries = await getNutritionSummary();\r\n        setWeeklyNutritionEntries(entries);\r\n      } catch (error) {\r\n        console.error('Error fetching weekly nutrition entries:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchWeeklyData();\r\n  }, [dataVersion]);\r\n\r\n  useEffect(() => {\r\n    const fetchAllNutritionEntries = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const entries = await getNutritionEntries();\r\n        setAllNutritionEntries(entries);\r\n      } catch (error) {\r\n        console.error('Error fetching all nutrition entries:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllNutritionEntries();\r\n  }, [dataVersion]);\r\n\r\n  const getWeeklySummary = useCallback(() => {\r\n    const uniqueDays = new Set();\r\n    weeklyNutritionEntries.forEach((entry) => {\r\n      if (!entry.date) return;\r\n\r\n      const entryDate = entry.date.toDate();\r\n      const dateKey = `${entryDate.getFullYear()}-${entryDate.getMonth()}-${entryDate.getDate()}`;\r\n      uniqueDays.add(dateKey);\r\n    });\r\n\r\n    const totalCalories = weeklyNutritionEntries.reduce(\r\n      (sum, entry) => sum + (entry.dailyTotals?.calories || 0),\r\n      0,\r\n    );\r\n\r\n    const totalProtein = weeklyNutritionEntries.reduce(\r\n      (sum, entry) => sum + (entry.dailyTotals?.protein || 0),\r\n      0,\r\n    );\r\n\r\n    const daysTracked = uniqueDays.size;\r\n\r\n    const averageCalories = daysTracked > 0 ? totalCalories / daysTracked : 0;\r\n    const averageProtein = daysTracked > 0 ? totalProtein / daysTracked : 0;\r\n\r\n    return {\r\n      averageCalories,\r\n      averageProtein,\r\n      daysTracked,\r\n    };\r\n  }, [weeklyNutritionEntries]);\r\n\r\n  // Calculate today's nutrition data\r\n  const getTodayData = useCallback(() => {\r\n    // Find today's entry\r\n    const todayEntry = allNutritionEntries.find((entry) => {\r\n      if (!entry.date) return false;\r\n      const entryDate = entry.date.toDate();\r\n      return isToday(entryDate);\r\n    });\r\n\r\n    return {\r\n      calories: todayEntry?.dailyTotals?.calories || 0,\r\n      protein: todayEntry?.dailyTotals?.protein || 0,\r\n      meals: todayEntry?.meals?.length || 0,\r\n    };\r\n  }, [allNutritionEntries]);\r\n\r\n  // Combined nutrition summary for dashboard\r\n  const nutritionSummary = useMemo(() => {\r\n    const weeklyData = getWeeklySummary();\r\n    const todayData = getTodayData();\r\n\r\n    return {\r\n      today: todayData,\r\n      weekly: {\r\n        averageCalories: weeklyData.averageCalories,\r\n        averageProtein: weeklyData.averageProtein,\r\n        daysTracked: weeklyData.daysTracked,\r\n      },\r\n    };\r\n  }, [getWeeklySummary, getTodayData]);\r\n\r\n  // Crud operations\r\n  const addEntry = async (entry: Omit<INutritionEntry, 'id'>) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const entryWithDate = {\r\n        ...entry,\r\n        date: entry.date || Timestamp.fromDate(selectedDate),\r\n      };\r\n\r\n      const entryId = await addNutritionEntry(entryWithDate);\r\n      if (entryId) {\r\n        // Instead of manually updating the arrays, trigger a reload\r\n        refreshData();\r\n        return entryId;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error adding nutrition entry:', error);\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateEntry = async (\r\n    id: string,\r\n    updates: Partial<INutritionEntry>,\r\n  ): Promise<boolean> => {\r\n    setIsLoading(true);\r\n    try {\r\n      const success = await updateNutritionEntry(id, updates);\r\n      if (success) {\r\n        refreshData(); // Trigger reload of data\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error updating nutrition entry:', error);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteEntry = async (id: string): Promise<boolean> => {\r\n    setIsLoading(true);\r\n    try {\r\n      const success = await deleteNutritionEntry(id);\r\n      if (success) {\r\n        refreshData(); // Trigger reload of data\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error deleting nutrition entry:', error);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateNotes = useCallback(\r\n    async (id: string, notes: string): Promise<boolean> => {\r\n      setIsLoading(true);\r\n      try {\r\n        const success = await updateNutritionEntry(id, { notes });\r\n        if (success) {\r\n          refreshData();\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (error) {\r\n        console.error('Error updating notes:', error);\r\n        return false;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [refreshData],\r\n  );\r\n\r\n  return {\r\n    // State\r\n    isLoading,\r\n    allNutritionEntries,\r\n    weeklyNutritionEntries,\r\n    selectedDateNutritionEntries,\r\n    nutritionSummary,\r\n\r\n    //CRUD operations\r\n    addEntry,\r\n    updateEntry,\r\n    deleteEntry,\r\n    updateNotes,\r\n\r\n    // Summary\r\n    getWeeklySummary,\r\n    getTodayData,\r\n\r\n    refreshData,\r\n  };\r\n};\r\n"],"names":["constructNow","date","constructFrom","isSameDay","dateLeft","dateRight","dateLeftStartOfDay","startOfDay","dateRightStartOfDay","isToday","formatDate","formatTimeStringToTimestamp","time","hours","minutes","Timestamp","formatTimeStampToTimeString","timestamp","nutritionService","FirestoreService","addNutritionEntry","entry","error","getNutritionEntries","max","getNutritionEntryById","entryId","updateNutritionEntry","entryData","deleteNutritionEntry","getNutritionEntriesByDate","getNutritionSummary","today","startDate","useNutritionEntry","selectedDate","allNutritionEntries","setAllNutritionEntries","useState","selectedDateNutritionEntries","setSelectedDateNutritionEntries","weeklyNutritionEntries","setWeeklyNutritionEntries","isLoading","setIsLoading","dataVersion","setDataVersion","isEntryInCurrentWeek","useCallback","weekAgo","entryDate","refreshData","updatedEntry","prev","useEffect","response","entries","getWeeklySummary","uniqueDays","dateKey","totalCalories","sum","_a","totalProtein","daysTracked","averageCalories","averageProtein","getTodayData","todayEntry","_b","_c","nutritionSummary","useMemo","weeklyData","addEntry","entryWithDate","updateEntry","id","updates","deleteEntry","updateNotes","notes"],"mappings":"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","x_google_ignoreList":[0,1,2]}