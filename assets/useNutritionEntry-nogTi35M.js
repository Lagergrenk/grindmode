import{T as p,r as s}from"./index-D4A55r9M.js";import{F as O}from"./firestore-DqkfDWpO.js";function P(t){const n=Object.prototype.toString.call(t);return t instanceof Date||typeof t=="object"&&n==="[object Date]"?new t.constructor(+t):typeof t=="number"||n==="[object Number]"||typeof t=="string"||n==="[object String]"?new Date(t):new Date(NaN)}function I(t,n){return t instanceof Date?new t.constructor(n):new Date(n)}function b(t){const n=P(t);return n.setHours(0,0,0,0),n}function x(t){return I(t,Date.now())}function H(t,n){const c=b(t),y=b(n);return+c==+y}function M(t){return H(t,x(t))}const Y=t=>new Intl.DateTimeFormat("en-US",{month:"short",day:"numeric"}).format(t);function _(t){const[n,c]=t.split(":").map(Number),y=new Date;return y.setHours(n,c,0,0),p.fromDate(y)}function G(t){return t.toDate().toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}const f=new O("nutrition"),R=async t=>{try{return await f.add(t)}catch(n){throw console.error("Error adding nutrition entry:",n),n}},V=async t=>{try{return await f.getAll(t)}catch(n){return console.error("Error fetching nutrition entries:",n),[]}},J=async t=>{try{return await f.getById(t)}catch(n){return console.error(`Error fetching nutrition entry ${t}:`,n),null}},C=async(t,n)=>{try{return await f.update(t,n)}catch(c){return console.error(`Error updating nutrition entry ${t}:`,c),!1}},q=async t=>{try{return await f.delete(t)}catch(n){return console.error(`Error deleting nutrition entry ${t}:`,n),!1}},v=async t=>{try{return await f.getByDate(t)}catch(n){return console.error("Error fetching nutrition entries by date:",n),[]}},z=async()=>{try{const t=new Date,n=new Date(t);return n.setDate(t.getDate()-7),await f.getByDateRange(n,t)}catch(t){return console.error("Error fetching nutrition summary:",t),[]}},Q=t=>{const[n,c]=s.useState([]),[y,N]=s.useState([]),[g,E]=s.useState([]),[W,a]=s.useState(!1),[k,$]=s.useState(0),T=s.useCallback(e=>{if(!e.date)return!1;const r=new Date,o=new Date;o.setDate(r.getDate()-7);const i=e.date.toDate();return i>=o&&i<=r},[]),D=s.useCallback(e=>{e&&(N(r=>r.some(o=>o.id===e.id)?r.map(o=>o.id===e.id?e:o):[e,...r]),T(e)&&E(r=>r.some(o=>o.id===e.id)?r.map(o=>o.id===e.id?e:o):[e,...r]),c(r=>r.some(o=>o.id===e.id)?r.map(o=>o.id===e.id?e:o):[e,...r])),$(r=>r+1)},[T]);s.useEffect(()=>{(async()=>{a(!0);try{const r=await v(t);N(r)}catch(r){console.error("Error fetching nutrition entries by date:",r)}finally{a(!1)}})()},[t]),s.useEffect(()=>{(async()=>{a(!0);try{const r=new Date;new Date().setDate(r.getDate()-7);const i=await z();E(i)}catch(r){console.error("Error fetching weekly nutrition entries:",r)}finally{a(!1)}})()},[k]),s.useEffect(()=>{(async()=>{a(!0);try{const r=await V();c(r)}catch(r){console.error("Error fetching all nutrition entries:",r)}finally{a(!1)}})()},[k]);const h=s.useCallback(()=>{const e=new Set;g.forEach(d=>{if(!d.date)return;const u=d.date.toDate(),l=`${u.getFullYear()}-${u.getMonth()}-${u.getDate()}`;e.add(l)});const r=g.reduce((d,u)=>{var l;return d+(((l=u.dailyTotals)==null?void 0:l.calories)||0)},0),o=g.reduce((d,u)=>{var l;return d+(((l=u.dailyTotals)==null?void 0:l.protein)||0)},0),i=e.size,m=i>0?r/i:0,S=i>0?o/i:0;return{averageCalories:m,averageProtein:S,daysTracked:i}},[g]),w=s.useCallback(()=>{var r,o,i;const e=n.find(m=>{if(!m.date)return!1;const S=m.date.toDate();return M(S)});return{calories:((r=e==null?void 0:e.dailyTotals)==null?void 0:r.calories)||0,protein:((o=e==null?void 0:e.dailyTotals)==null?void 0:o.protein)||0,meals:((i=e==null?void 0:e.meals)==null?void 0:i.length)||0}},[n]),j=s.useMemo(()=>{const e=h();return{today:w(),weekly:{averageCalories:e.averageCalories,averageProtein:e.averageProtein,daysTracked:e.daysTracked}}},[h,w]),A=async e=>{a(!0);try{const r={...e,date:e.date||p.fromDate(t)},o=await R(r);return o?(D(),o):null}catch(r){return console.error("Error adding nutrition entry:",r),null}finally{a(!1)}},B=async(e,r)=>{a(!0);try{return await C(e,r)?(D(),!0):!1}catch(o){return console.error("Error updating nutrition entry:",o),!1}finally{a(!1)}},F=async e=>{a(!0);try{return await q(e)?(D(),!0):!1}catch(r){return console.error("Error deleting nutrition entry:",r),!1}finally{a(!1)}},L=s.useCallback(async(e,r)=>{a(!0);try{return await C(e,{notes:r})?(D(),!0):!1}catch(o){return console.error("Error updating notes:",o),!1}finally{a(!1)}},[D]);return{isLoading:W,allNutritionEntries:n,weeklyNutritionEntries:g,selectedDateNutritionEntries:y,nutritionSummary:j,addEntry:A,updateEntry:B,deleteEntry:F,updateNotes:L,getWeeklySummary:h,getTodayData:w,refreshData:D}};export{G as a,_ as b,R as c,C as d,Y as f,J as g,Q as u};
